name: Build and Release Pixiu for Windows & macOS

on:
  push:
    tags:
      - 'v*'  # 当你 push 如 v1.0.0, v0.1.2 等 tag 时触发

jobs:
  build-and-release:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'  # 根据你的 go.mod 调整，建议 >=1.20

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'  # 推荐 16/18/20，根据你的前端要求

      - name: Install Wails CLI
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Ensure ~/go/bin is in PATH
        run: |
          echo "GOPATH/bin is at: $HOME/go/bin"
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Check Wails Version
        run: wails version

      - name: Build Wails Application
        env:
          GOOS: ${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'darwin' || 'linux' }}
          GOARCH: 'amd64'
        run: |
          wails build -ldflags="-s -w" -clean

      - name: Package Build Artifacts
        id: package
        run: |
          mkdir -p packaged

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows
            if [ -f "build/bin/*.exe" ]; then
              cp build/bin/*.exe packaged/pixiu-windows-amd64.exe
              cd packaged
              zip -r pixiu-windows-amd64.zip pixiu-windows-amd64.exe
              echo "ASSET=pixiu-windows-amd64.zip" >> $GITHUB_OUTPUT
            else
              echo "❌ 未找到 Windows 可执行文件 (*.exe)，请检查 build/ 目录"
              exit 1
            fi

          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS
            if [ -d "build/bin/Pixiu.app" ]; then
              echo "✅ 找到 macOS 应用包：build/bin/Pixiu.app"
              cp -r build/bin/Pixiu.app packaged/Pixiu.app
              cd packaged
              tar -czvf Pixiu.app.tar.gz Pixiu.app
              echo "ASSET=Pixiu.app.tar.gz" >> $GITHUB_OUTPUT
            elif [ -d "build/Pixiu.app" ]; then
              # 备选：如果你的 app 包直接在 build/Pixiu.app（不太常见）
              cp -r build/Pixiu.app packaged/Pixiu.app
              cd packaged
              tar -czvf Pixiu.app.tar.gz Pixiu.app
              echo "ASSET=Pixiu.app.tar.gz" >> $GITHUB_OUTPUT
            else
              echo "❌ 未找到 macOS .app 包。请检查以下路径是否存在："
              echo "  - build/bin/Pixiu.app"
              echo "  - build/Pixiu.app"
              ls -R build/
              exit 1
            fi

          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "🔧 Linux 构建暂未处理"
            exit 0
          else
            echo "❌ 不支持的操作系统: ${{ matrix.os }}"
            exit 1
          fi

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            ${{ steps.package.outputs.ASSET }}
          draft: false
          prerelease: false